<# 
.SYNOPSIS
  Start a Genesys Cloud WFM Historical Adherence (bulk) job using a pre-issued access token.

.EXAMPLE
  .\Start-GC-HistoricalAdherenceBulk.ps1 `
    -AccessToken 'eyJhbGciOiJ...' `
    -ManagementUnitId 'YOUR_MU_ID' `
    -StartDate '2025-08-11' `
    -EndDate '2025-08-15' `
    -Poll
#>

param(
  [Parameter(Mandatory=$true)] [string] $AccessToken,
  [Parameter(Mandatory=$true)] [string] $ManagementUnitId,
  [Parameter(Mandatory=$true)] [string] $StartDate,  # YYYY-MM-DD
  [Parameter(Mandatory=$true)] [string] $EndDate,    # YYYY-MM-DD

  [string] $RegionBase = "https://api.mypurecloud.com.au",
  [string] $TimeZone   = "Australia/Sydney",

  [switch] $Poll,
  [int] $PollIntervalSeconds = 15,
  [int] $PollTimeoutMinutes  = 15
)

$ErrorActionPreference = 'Stop'

function Start-HistoricalAdherenceBulk {
  param(
    [string]$RegionBase,[string]$AccessToken,[string]$ManagementUnitId,
    [string]$StartDate,[string]$EndDate,[string]$TimeZone
  )

  $uri = "$RegionBase/api/v2/workforcemanagement/adherence/historical/bulk"
  $headers = @{ "Authorization" = "Bearer $AccessToken"; "Content-Type" = "application/json" }

  $payload = @{
    items   = @(@{
      managementUnitId = $ManagementUnitId
      startDate        = $StartDate
      endDate          = $EndDate
    })
    timeZone = $TimeZone
  } | ConvertTo-Json -Depth 6

  return Invoke-RestMethod -Method POST -Uri $uri -Headers $headers -Body $payload
}

function Get-BulkJobStatus {
  param([string]$StatusUrl,[string]$AccessToken)
  $headers = @{ "Authorization" = "Bearer $AccessToken" }
  return Invoke-RestMethod -Method GET -Uri $StatusUrl -Headers $headers
}

try {
  Write-Host "Starting Historical Adherence bulk job..." -ForegroundColor Cyan
  $startResp = Start-HistoricalAdherenceBulk -RegionBase $RegionBase -AccessToken $AccessToken `
              -ManagementUnitId $ManagementUnitId -StartDate $StartDate -EndDate $EndDate -TimeZone $TimeZone

  $jobId   = $startResp.jobId
  $selfUri = $startResp.selfUri
  $statusUrl = if ($selfUri -match '^https?://') { $selfUri } else { "$RegionBase$selfUri" }

  Write-Host ""
  Write-Host "Job started." -ForegroundColor Green
  Write-Host ("jobId    : {0}" -f $jobId)
  Write-Host ("statusUrl: {0}" -f $statusUrl)
  Write-Host ("state    : {0}" -f $startResp.state)

  if (-not $Poll) { return }

  Write-Host "`nPolling until Complete..." -ForegroundColor Cyan
  $deadline = (Get-Date).AddMinutes($PollTimeoutMinutes)
  $lastState = $null

  Start-Sleep -Seconds 2

  do {
    try {
      $status = Get-BulkJobStatus -StatusUrl $statusUrl -AccessToken $AccessToken
    } catch {
      Write-Host "Transient error while polling: $($_.Exception.Message)" -ForegroundColor DarkYellow
      Start-Sleep -Seconds $PollIntervalSeconds
      continue
    }

    $state = $status.state
    if ($state -ne $lastState) {
      Write-Host ("[{0}] state = {1}" -f (Get-Date), $state)
      $lastState = $state
    }

    if ($state -eq 'Failed') {
      $msg = if ($status.errorMessage) { $status.errorMessage } else { 'Historical adherence job failed.' }
      throw "Job failed: $msg"
    }

    if ($state -ne 'Complete') {
      Start-Sleep -Seconds $PollIntervalSeconds
    }

  } while ($state -ne 'Complete' -and (Get-Date) -lt $deadline)

  if ($state -ne 'Complete') {
    throw "Timeout waiting for job to Complete."
  }

  Write-Host "`nJob Complete." -ForegroundColor Green

  if ($status.downloadUrls -and $status.downloadUrls.Count -gt 0) {
    Write-Host "downloadUrls:" -ForegroundColor Green
    $status.downloadUrls | ForEach-Object { Write-Host "  $_" }
  } else {
    Write-Host "No downloadUrls returned (empty result set)." -ForegroundColor Yellow
  }

} catch {
  Write-Error $_.Exception.Message
}
