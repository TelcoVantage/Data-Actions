# =============================================================================
# User Configuration - Hardcoded Test
# =============================================================================

# Use the Client ID and Secret for the final test.
$clientId = "YOUR_CLIENT_ID_HERE"
$clientSecret = "YOUR_CLIENT_SECRET_HERE"
$genesysCloudRegion = "com.au"

# --- PASTE YOUR KNOWN-GOOD VALUES HERE ---
# Paste the Management Unit ID you verified in the UI.
$managementUnitId = "ID_OF_MU_WITH_KNOWN_DATA" 

# Set the EXACT start and end date for the day you verified in the UI.
# Example for August 18th, 2025.
$startDate = "2025-08-18T00:00:00.000Z"
$endDate = "2025-08-19T00:00:00.000Z"
$timeZone = "Australia/Sydney"
# =============================================================================
# Script Logic (No edits needed below)
# =============================================================================
# ... (The rest of the script is the same as the last version) ...
$loginUrl = "https://login.mypurecloud.$($genesysCloudRegion)/oauth/token"
$apiUrl = "https://api.mypurecloud.$($genesysCloudRegion)/api/v2/workforcemanagement/adherence/historical/bulk"
Write-Host "Authenticating..."
try {
    $authBody = @{ grant_type = "client_credentials"; client_id = $clientId; client_secret = $clientSecret }
    $tokenResponse = Invoke-RestMethod -Uri $loginUrl -Method Post -Body $authBody -ContentType 'application/x-www-form-urlencoded'
    $accessToken = $tokenResponse.access_token
} catch { Write-Error "Auth failed: $($_.Exception.Message)"; return }
Write-Host "Submitting job with hardcoded known-good data..."
$headers = @{ "Authorization"  = "Bearer $($accessToken)"; "Content-Type"   = "application/json" }
$jobRequestBodyObject = @{ items = @( @{ managementUnitId = $managementUnitId; startDate = $startDate; endDate = $endDate } ); timeZone = $timeZone }
$jsonBody = $jobRequestBodyObject | ConvertTo-Json
try {
    $jobResponse = Invoke-RestMethod -Uri $apiUrl -Method Post -Headers $headers -Body $jsonBody
    Write-Host "`nâœ… Job successfully submitted!" -ForegroundColor Green
    Write-Host "--------------------------------"
    Write-Host "Job ID: $($jobResponse.job.id)" -ForegroundColor Cyan
    Write-Host "Status: $($jobResponse.job.status)"
    Write-Host "--------------------------------"
} catch {
    $errorResponse = $_.Exception.Response
    $statusCode = [int]$errorResponse.StatusCode
    $streamReader = New-Object System.IO.StreamReader($errorResponse.GetResponseStream())
    $errorBody = $streamReader.ReadToEnd()
    Write-Error "ðŸ”´ Failed to submit job. HTTP Status Code: $statusCode"
    Write-Error "API Error Response: $errorBody"
}
