# =============================================================================
# User Configuration - FINAL SCRIPT
# =============================================================================

# Your Genesys Cloud OAuth Client ID
$clientId = "YOUR_CLIENT_ID_HERE"

# Your Genesys Cloud OAuth Client Secret
$clientSecret = "YOUR_CLIENT_SECRET_HERE"

# Your Genesys Cloud region (e.g., "com", "com.au", "eu-west-1.pure.cloud")
$genesysCloudRegion = "com.au"

# The ID of the Management Unit you want to query
$managementUnitId = "YOUR_MANAGEMENT_UNIT_ID_HERE"

# The timezone for the report query
$timeZone = "Australia/Sydney"

# --- Date Range Configuration ---
$startDate = (Get-Date).AddDays(-1).Date.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
$endDate = (Get-Date).Date.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")

# =============================================================================
# Script Logic
# =============================================================================

$loginUrl = "https://login.mypurecloud.$($genesysCloudRegion)/oauth/token"
$apiUrl = "https://api.mypurecloud.$($genesysCloudRegion)/api/v2/workforcemanagement/adherence/historical/bulk"

Write-Host "Authenticating with Genesys Cloud..." -ForegroundColor Green
try {
    $authBody = @{ grant_type = "client_credentials"; client_id = $clientId; client_secret = $clientSecret }
    $tokenResponse = Invoke-RestMethod -Uri $loginUrl -Method Post -Body $authBody -ContentType 'application/x-www-form-urlencoded'
    $accessToken = $tokenResponse.access_token
    Write-Host "Successfully obtained access token."
}
catch {
    Write-Error "Failed to get access token. Error: $($_.Exception.Message)"
    return
}

Write-Host "Submitting historical adherence job..." -ForegroundColor Green
$headers = @{ "Authorization"  = "Bearer $($accessToken)"; "Content-Type"   = "application/json" }
$jobRequestBodyObject = @{
    items = @( @{ managementUnitId = $managementUnitId; startDate = $startDate; endDate = $endDate } )
    timeZone = $timeZone
}
$jsonBody = $jobRequestBodyObject | ConvertTo-Json

try {
    $jobResponse = Invoke-RestMethod -Uri $apiUrl -Method Post -Headers $headers -Body $jsonBody
    
    Write-Host "`nâœ… Job successfully submitted!" -ForegroundColor Green
    Write-Host "--------------------------------"
    # --- CORRECTED LINES ---
    Write-Host "Job ID: $($jobResponse.job.id)" -ForegroundColor Cyan
    Write-Host "Status: $($jobResponse.job.status)"
    # --- END CORRECTIONS ---
    Write-Host "--------------------------------"
    Write-Host "`nUse the Job ID above to check the status and download the report."

}
catch {
    $errorResponse = $_.Exception.Response
    $statusCode = [int]$errorResponse.StatusCode
    $streamReader = New-Object System.IO.StreamReader($errorResponse.GetResponseStream())
    $errorBody = $streamReader.ReadToEnd()
    Write-Error "ðŸ”´ Failed to submit job. HTTP Status Code: $statusCode"
    Write-Error "API Error Response: $errorBody"
}
