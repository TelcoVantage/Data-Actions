# =============================================================================
# User Configuration - FILL IN YOUR DETAILS HERE
# =============================================================================

# 1. Paste the access token you generated from Genesys Cloud Developer Tools here.
$manualAccessToken = "PASTE_YOUR_COPIED_TOKEN_HERE"

# 2. Fill in your Genesys Cloud Region and Management Unit ID
$genesysCloudRegion = "com.au"
$managementUnitId = "YOUR_MANAGEMENT_UNIT_ID_HERE"
$timeZone = "Australia/Sydney"

# --- Date Range ---
$startDate = (Get-Date).AddDays(-1).Date.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
$endDate = (Get-Date).Date.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")

# =============================================================================
# Script Logic
# =============================================================================
Write-Host "Milestone 1: Script started, variables loaded." -ForegroundColor Yellow

$apiUrl = "https://api.mypurecloud.$($genesysCloudRegion)/api/v2/workforcemanagement/adherence/historical/bulk"

Write-Host "Submitting historical adherence job using manual user token..." -ForegroundColor Green

$headers = @{
    "Authorization"  = "Bearer $($manualAccessToken)"
    "Content-Type"   = "application/json"
}

$jobRequestBodyObject = @{
    items = @( @{ managementUnitId = $managementUnitId; startDate = $startDate; endDate = $endDate } )
    timeZone = $timeZone
}
$jsonBody = $jobRequestBodyObject | ConvertTo-Json

Write-Host "Milestone 2: Entering API call block." -ForegroundColor Yellow

try {
    $jobResponse = Invoke-RestMethod -Uri $apiUrl -Method Post -Headers $headers -Body $jsonBody
    
    Write-Host "`nâœ… Job successfully submitted!" -ForegroundColor Green
    Write-Host "--------------------------------"
    Write-Host "Job ID: $($jobResponse.id)" -ForegroundColor Cyan
    Write-Host "Status: $($jobResponse.state)"
    Write-Host "--------------------------------"
    $jobId = $jobResponse.id
}
catch {
    $errorResponse = $_.Exception.Response
    $statusCode = [int]$errorResponse.StatusCode
    $streamReader = New-Object System.IO.StreamReader($errorResponse.GetResponseStream())
    $errorBody = $streamReader.ReadToEnd()
    Write-Error "ðŸ”´ Failed to submit job. HTTP Status Code: $statusCode"
    Write-Error "API Error Response: $errorBody"
}

Write-Host "Milestone 3: Script finished." -ForegroundColor Yellow
