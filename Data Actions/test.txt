<# 
  Genesys Cloud (AU) – CLM-safe presence analytics
  Detects ON_QUEUE → AVAILABLE → ON_QUEUE and exports triplet CSV with presence + routing summaries.
  Works in Constrained Language Mode (no .NET static calls, no generic lists, no ternary, etc.).
#>

param(
  [string]$Region        = "mypurecloud.com.au",
  [string]$ClientId      = "b5cfd3ca-e1e0-4af2-86ba-a815f618e62a",
  [string]$ClientSecret  = "hPp4KSICLFJV1hoMsoxTXuXKY594TkKmsKcA2IjsrnE",
  [string]$Interval      = "2025-10-15T13:00:00.000Z/2025-10-17T13:00:00.000Z",
  [int]   $PageSize      = 100,
  [bool]  $ResolveNames  = $true,
  [int]   $StartPage     = 1,
  [int]   $ThrottleMs    = 250
)

# ---------------- Helpers ----------------

function Get-AccessToken {
  param([string]$Region, [string]$ClientId, [string]$ClientSecret)
  $tokenUrl = "https://login.$Region/oauth/token"
  $body = @{
    grant_type    = 'client_credentials'
    client_id     = $ClientId
    client_secret = $ClientSecret
  }
  try {
    $resp = Invoke-RestMethod -Method Post -Uri $tokenUrl -Body $body -ContentType "application/x-www-form-urlencoded"
    if (-not $resp.access_token) { throw "No access_token in response." }
    $resp.access_token
  } catch {
    throw "Failed to obtain access token: $($_.Exception.Message)"
  }
}

function Invoke-GenesysApi {
  param(
    [ValidateSet('GET','POST','PUT','DELETE','PATCH')]
    [string]$Method,
    [string]$Path,
    [hashtable]$Headers,
    [object]$Body = $null,
    [int]$MaxRetries = 8
  )
  $base = "https://api.$Region"
  $uri  = if ($Path -like "http*") { $Path } else { "$base$Path" }

  $attempt = 0
  $backoff = @(2,4,8,16,30,60)  # fixed ladder for CLM (no [math]::Pow)

  while ($true) {
    try {
      if ($Body -ne $null -and $Method -in @('POST','PUT','PATCH')) {
        $json = $Body | ConvertTo-Json -Depth 20
        return Invoke-RestMethod -Method $Method -Uri $uri -Headers $Headers -Body $json -ContentType "application/json"
      } else {
        return Invoke-RestMethod -Method $Method -Uri $uri -Headers $Headers
      }
    }
    catch {
      $attempt++
      $resp = $null
      $statusCode = 0
      try { $resp = $_.Exception.Response; $statusCode = [int]$resp.StatusCode } catch {}
      if ($statusCode -ne 429 -or $attempt -gt $MaxRetries) { throw }

      # Respect Retry-After header if present
      $retryAfter = 0
      try {
        if ($resp -and $resp.Headers -and $resp.Headers['Retry-After']) {
          $retryAfter = [int]$resp.Headers['Retry-After']
        }
      } catch {}

      if ($retryAfter -lt 1) {
        $index = $attempt - 1
        if ($index -ge $backoff.Count) { $index = $backoff.Count - 1 }
        $retryAfter = $backoff[$index]
      }

      Write-Warning ("429 received. Waiting {0}s then retrying (attempt {1}/{2})..." -f $retryAfter, $attempt, $MaxRetries)
      Start-Sleep -Seconds $retryAfter
    }
  }
}

function Get-UserName {
  param([string]$UserId, [hashtable]$Headers)
  if (-not $script:UserNameCache) { $script:UserNameCache = @{} }
  if ($script:UserNameCache.ContainsKey($UserId)) { return $script:UserNameCache[$UserId] }
  try {
    $u = Invoke-GenesysApi -Method GET -Path "/api/v2/users/$UserId" -Headers $Headers
    $name = if ($u -and $u.name) { $u.name } else { $UserId }
    $script:UserNameCache[$UserId] = $name
    $name
  } catch {
    $script:UserNameCache[$UserId] = $UserId
    $UserId
  }
}

function To-Date {
  param([string]$s)
  if ([string]::IsNullOrWhiteSpace($s)) { return $null }
  try { [datetime]::Parse($s, $null, [System.Globalization.DateTimeStyles]::AssumeUniversal) } catch { $null }
}

# Overlap summary of routing statuses within a window: "STATUS=secs; ..."
function Summarize-RoutingStatus {
  param(
    [object[]]$RoutingStatuses,
    [datetime]$WinStart,
    [datetime]$WinEnd
  )
  if (-not $RoutingStatuses -or -not $WinStart) { return $null }
  if (-not $WinEnd) { $WinEnd = (Get-Date).ToUniversalTime() }

  $totals = @{}
  foreach ($rs in $RoutingStatuses) {
    $rsStart = To-Date $rs.startTime
    if (-not $rsStart) { continue }
    $rsEnd = To-Date $rs.endTime
    if (-not $rsEnd) { $rsEnd = (Get-Date).ToUniversalTime() }

    $ovStart = if ($rsStart -gt $WinStart) { $rsStart } else { $WinStart }
    $ovEnd   = if ($rsEnd   -lt $WinEnd)   { $rsEnd }   else { $WinEnd }
    if ($ovEnd -le $ovStart) { continue }

    $secs = [int]((New-TimeSpan -Start $ovStart -End $ovEnd).TotalSeconds)
    $key  = if ($rs.routingStatus) { [string]$rs.routingStatus } else { 'UNKNOWN' }
    if ($totals.ContainsKey($key)) { $totals[$key] += $secs } else { $totals[$key] = $secs }
  }

  if ($totals.Count -eq 0) { return $null }
  ($totals.GetEnumerator() | Sort-Object Value -Descending | ForEach-Object { "$($_.Key)=$($_.Value)" }) -join "; "
}

# Format to ISO 8601 without .ToString('o') (CLM-safe)
function Iso8601 {
  param([datetime]$dt)
  if (-not $dt) { return $null }
  (Get-Date -Date $dt -Format o)
}

# ---------------- Main ----------------

$token       = Get-AccessToken -Region $Region -ClientId $ClientId -ClientSecret $ClientSecret
$authHeaders = @{ Authorization = "Bearer $token" }

$pageNumber = [int]([Math]::Max(1, $StartPage))  # [Math]::Max may be blocked in CLM; fallback:
if ($pageNumber -lt 1) { $pageNumber = 1 }

$allPresenceRows = @()
$onQueueToAvail  = @()
$oqAvailOqList   = @()

Write-Host "Querying /api/v2/analytics/users/details/query for interval $Interval ..." -ForegroundColor Cyan

$moreLikely = $true
$totalHits  = $null

while ($moreLikely) {
  $body = @{
    interval = $Interval
    order    = "asc"
    paging   = @{
      pageSize   = "$PageSize"
      pageNumber = $pageNumber
    }
  }

  $resp = Invoke-GenesysApi -Method POST -Path "/api/v2/analytics/users/details/query" -Headers $authHeaders -Body $body

  if (-not $resp -or -not $resp.userDetails) {
    Write-Warning "No userDetails on page $pageNumber."
    break
  }

  if ($null -eq $totalHits -and $resp.totalHits) { $totalHits = [int]$resp.totalHits }

  foreach ($ud in $resp.userDetails) {
    $userId   = $ud.userId
    $userName = if ($ResolveNames) { Get-UserName -UserId $userId -Headers $authHeaders } else { $userId }

    # Build ordered presence blocks
    $blocks = @()
    foreach ($p in ($ud.primaryPresence | ForEach-Object { $_ })) {
      $pStart = To-Date $p.startTime
      if (-not $pStart) { continue }
      $pEnd   = To-Date $p.endTime
      if (-not $pEnd) { $pEnd = (Get-Date).ToUniversalTime() }
      $seconds = [int]((New-TimeSpan -Start $pStart -End $pEnd).TotalSeconds)

      $allPresenceRows += [pscustomobject]@{
        UserId        = $userId
        UserName      = $userName
        Presence      = $p.systemPresence
        OrgPresenceId = $p.organizationPresenceId
        StartTimeUtc  = Iso8601 $pStart
        EndTimeUtc    = Iso8601 $pEnd
        Seconds       = $seconds
      }

      $blocks += [pscustomobject]@{
        Start = $pStart
        End   = $pEnd
        Pres  = $p.systemPresence
        Sec   = $seconds
      }
    }

    # Sort by start time
    $blocks = $blocks | Sort-Object Start

    # Adjacent ON_QUEUE -> AVAILABLE pairs (optional export we keep)
    for ($i = 1; $i -lt $blocks.Count; $i++) {
      $prev = $blocks[$i-1]; $curr = $blocks[$i]
      if ($prev.Pres -eq 'ON_QUEUE' -and $curr.Pres -eq 'AVAILABLE') {
        $gapSecs = [int]((New-TimeSpan -Start $prev.End -End $curr.Start).TotalSeconds)
        if ($gapSecs -lt 0) { $gapSecs = 0 }
        $onQueueToAvail += [pscustomobject]@{
          UserId           = $userId
          UserName         = $userName
          PrevPresence     = $prev.Pres
          PrevStartTimeUtc = Iso8601 $prev.Start
          PrevEndTimeUtc   = Iso8601 $prev.End
          PrevSeconds      = $prev.Sec
          CurrPresence     = $curr.Pres
          CurrStartTimeUtc = Iso8601 $curr.Start
          CurrEndTimeUtc   = Iso8601 $curr.End
          CurrSeconds      = $curr.Sec
          GapSeconds       = $gapSecs
        }
      }
    }

    # Triplets: ON_QUEUE -> AVAILABLE -> ON_QUEUE
    for ($i = 2; $i -lt $blocks.Count; $i++) {
      $one   = $blocks[$i-2]
      $two   = $blocks[$i-1]
      $three = $blocks[$i]
      if ($one.Pres -eq 'ON_QUEUE' -and $two.Pres -eq 'AVAILABLE' -and $three.Pres -eq 'ON_QUEUE') {
        $rs1 = Summarize-RoutingStatus -RoutingStatuses $ud.routingStatus -WinStart $one.Start   -WinEnd $one.End
        $rs2 = Summarize-RoutingStatus -RoutingStatuses $ud.routingStatus -WinStart $two.Start   -WinEnd $two.End
        $rs3 = Summarize-RoutingStatus -RoutingStatuses $ud.routingStatus -WinStart $three.Start -WinEnd $three.End

        $oqAvailOqList += [pscustomobject]@{
          UserId                = $userId
          UserName              = $userName

          FirstOnQueue_Presence = 'ON_QUEUE'
          FirstOnQueue_StartUtc = Iso8601 $one.Start
          FirstOnQueue_EndUtc   = Iso8601 $one.End
          FirstOnQueue_Seconds  = $one.Sec
          FirstOnQueue_RoutingStatus = $rs1

          Available_Presence    = 'AVAILABLE'
          Available_StartUtc    = Iso8601 $two.Start
          Available_EndUtc      = Iso8601 $two.End
          Available_Seconds     = $two.Sec
          Available_RoutingStatus = $rs2

          NextOnQueue_Presence  = 'ON_QUEUE'
          NextOnQueue_StartUtc  = Iso8601 $three.Start
          NextOnQueue_EndUtc    = Iso8601 $three.End
          NextOnQueue_Seconds   = $three.Sec
          NextOnQueue_RoutingStatus = $rs3
        }
      }
    }
  }

  $processed = $pageNumber * $PageSize
  $totalHitsText = if ($null -ne $totalHits) { $totalHits } else { 'unknown' }
  Write-Host ("Processed page {0}. presenceRows={1}. totalHits={2}" -f $pageNumber, $allPresenceRows.Count, $totalHitsText)

  if ($ThrottleMs -gt 0) { Start-Sleep -Milliseconds $ThrottleMs }
  $pageNumber++

  $moreLikely = $false
  if ($resp.userDetails.Count -eq $PageSize) { $moreLikely = $true }
  if ($null -ne $totalHits) { if ($processed -lt $totalHits) { $moreLikely = $true } }
}

# ---------------- Export ----------------
$stamp   = (Get-Date).ToUniversalTime().ToString("yyyyMMdd_HHmmss")
$allCsv  = "Presence_AllBlocks_$stamp.csv"
$tranCsv = "Presence_OnQueueToAvailable_$stamp.csv"
$tripCsv = "Presence_OQ_Available_OQ_$stamp.csv"

$allPresenceRows | Export-Csv -NoTypeInformation -Encoding UTF8 -Path $allCsv
$onQueueToAvail  | Export-Csv -NoTypeInformation -Encoding UTF8 -Path $tranCsv
$oqAvailOqList   | Export-Csv -NoTypeInformation -Encoding UTF8 -Path $tripCsv

Write-Host ""
Write-Host "✅ Done."
Write-Host "• All blocks:                   $allCsv"  -ForegroundColor Green
Write-Host "• ON_QUEUE → AVAILABLE pairs:   $tranCsv" -ForegroundColor Green
Write-Host "• OQ → AVAILABLE → OQ triplets: $tripCsv" -ForegroundColor Green
Write-Host ""

if ($oqAvailOqList.Count -gt 0) {
  Write-Host "Top users by OQ→Available→OQ triplets:" -ForegroundColor Yellow
  $oqAvailOqList | Group-Object UserName | Sort-Object Count -Descending |
    Select-Object @{n='User';e={$_.Name}}, @{n='Triplets';e={$_.Count}} | Format-Table -AutoSize
} else {
  Write-Host "No OQ→Available→OQ triplets found in the interval." -ForegroundColor Yellow
}
