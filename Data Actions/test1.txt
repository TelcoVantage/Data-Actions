# --- Requirements ---
# PowerShell 5.1+ or 7+, Teams Admin/Global Admin (to see all teams)
# Module: MicrosoftTeams (preview recommended for Get-TeamChannelUser)

# Install/upgrade per-user (no admin rights needed)
if (-not (Get-Module -ListAvailable MicrosoftTeams)) {
  Install-Module MicrosoftTeams -Scope CurrentUser -Force -AllowClobber
}
Import-Module MicrosoftTeams

# Optional: ensure preview (needed for Get-TeamChannelUser in some tenants)
$hasChanUser = Get-Command Get-TeamChannelUser -ErrorAction SilentlyContinue
if (-not $hasChanUser) {
  try {
    Install-Module MicrosoftTeams -Scope CurrentUser -Force -AllowPrerelease
    Import-Module MicrosoftTeams -Force
    $hasChanUser = Get-Command Get-TeamChannelUser -ErrorAction SilentlyContinue
  } catch { Write-Warning "Couldn't install preview module: $($_.Exception.Message)" }
}

# Sign in
Connect-MicrosoftTeams | Out-Null

# Output file (AU-friendly stamp)
$stamp = (Get-Date).ToString('ddMMyyyy_HHmm')
$outFile = Join-Path $env:USERPROFILE "Downloads\TeamsChannelsOwners_$stamp.csv"

$rows = New-Object System.Collections.Generic.List[object]

$teams = Get-Team -NumberOfThreads 10   # requires admin role to enumerate org-wide
$i = 0
foreach ($t in $teams) {
  $i++
  Write-Progress -Activity "Teams" -Status "$i / $($teams.Count): $($t.DisplayName)" -PercentComplete ($i/$teams.Count*100)

  # Team-level owners
  $teamOwners = @()
  try { $teamOwners = Get-TeamUser -GroupId $t.GroupId -Role Owner } catch {}
  $teamOwnerNames = ($teamOwners | ForEach-Object Name) -join '; '
  $teamOwnerUPNs  = ($teamOwners | ForEach-Object User) -join '; '

  # Channels
  $channels = @()
  try { $channels = Get-TeamChannel -GroupId $t.GroupId } catch {}

  foreach ($ch in $channels) {
    $chanOwnerNames = $null; $chanOwnerUPNs = $null; $note = $null
    if ($ch.MembershipType -in @('Private','Shared')) {
      if ($hasChanUser) {
        try {
          $owners = Get-TeamChannelUser -GroupId $t.GroupId -DisplayName $ch.DisplayName -Role Owner
          $chanOwnerNames = ($owners | ForEach-Object Name) -join '; '
          $chanOwnerUPNs  = ($owners | ForEach-Object User) -join '; '
          $note = 'Channel owners (private/shared)'
        } catch {
          $note = 'Failed to resolve channel owners'
        }
      } else {
        $note = 'Install Teams PS preview to get channel owners'
      }
    } else {
      $chanOwnerNames = $teamOwnerNames
      $chanOwnerUPNs  = $teamOwnerUPNs
      $note = 'Standard channel â†’ uses Team owners'
    }

    $rows.Add([pscustomobject]@{
      TeamName          = $t.DisplayName
      TeamId            = $t.GroupId
      ChannelName       = $ch.DisplayName
      ChannelId         = $ch.Id
      ChannelType       = $ch.MembershipType   # Standard | Private | Shared
      TeamOwnerNames    = $teamOwnerNames
      TeamOwnerUPNs     = $teamOwnerUPNs
      ChannelOwnerNames = $chanOwnerNames
      ChannelOwnerUPNs  = $chanOwnerUPNs
      OwnerDerivation   = $note
    })
  }
}

$rows | Sort-Object TeamName, ChannelType, ChannelName |
  Export-Csv -Path $outFile -NoTypeInformation -Encoding UTF8

Write-Host "`nDone. CSV saved to: $outFile" -ForegroundColor Green
