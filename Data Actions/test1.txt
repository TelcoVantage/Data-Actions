# =====================================================================================
# SCRIPT CONFIGURATION - FILL IN YOUR DETAILS HERE
# =====================================================================================

# 1. Your Genesys Cloud Client ID from the OAuth Client you created
$clientId = "YOUR_CLIENT_ID"

# 2. Your Genesys Cloud Client Secret from the OAuth Client you created
$clientSecret = "YOUR_CLIENT_SECRET"

# 3. Your Genesys Cloud Region's API Host.
#    Examples:
#    - North America (East): api.mypurecloud.com
#    - Australia (Sydney):   api.mypurecloud.com.au
#    - EU (Frankfurt):       api.mypurecloud.de
#    Find your region here: https://developer.genesys.cloud/platform/api/
$genesysCloudRegion = "api.mypurecloud.com.au"

# 4. The ID of the Business Unit you want to query
$businessUnitId = "YOUR_BUSINESS_UNIT_ID"

# 5. The ID of the Management Unit containing the agents you want to query
$managementUnitId = "YOUR_MANAGEMENT_UNIT_ID"

# 6. The full path where you want to save the final CSV file.
#    The script will automatically add the date to the filename.
$csvExportPath = "C:\Temp\AgentSchedules.csv"

# =====================================================================================
# SCRIPT LOGIC - NO NEED TO EDIT BELOW THIS LINE
# =====================================================================================

# --- Function to Write Log Messages ---
function Write-Log {
    param ([string]$Message, [string]$Color = "White")
    Write-Host ("[{0}] - {1}" -f (Get-Date -Format "HH:mm:ss"), $Message) -ForegroundColor $Color
}

# --- 1. Calculate Date Range for "Yesterday" ---
$today = (Get-Date).Date
$yesterdayStart = $today.AddDays(-1)
$yesterdayEnd = $today.AddSeconds(-1)

# Convert dates to ISO 8601 format required by the API
$startDateIso = $yesterdayStart.ToString("u").Replace(" ", "T")
$endDateIso = $yesterdayEnd.ToString("u").Replace(" ", "T")

Write-Log "Fetching schedules for the period: $startDateIso to $endDateIso" "Cyan"

# --- 2. Authenticate and Get Access Token ---
Write-Log "Authenticating with Genesys Cloud..."
$authUrl = "https://login.$genesysCloudRegion/oauth/token"
$authBody = @{
    grant_type = "client_credentials"
}
$authHeader = @{
    "Authorization" = "Basic " + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("${clientId}:${clientSecret}"))
    "Content-Type"  = "application/x-www-form-urlencoded"
}

try {
    $tokenResponse = Invoke-RestMethod -Uri $authUrl -Method Post -Body $authBody -Headers $authHeader
    $accessToken = $tokenResponse.access_token
    Write-Log "Successfully authenticated." "Green"
}
catch {
    Write-Log "Error authenticating. Check your Client ID, Secret, and Region." "Red"
    Write-Log $_.Exception.Message "Red"
    exit
}

# --- 3. Prepare API Headers ---
$apiHeaders = @{
    "Authorization" = "Bearer $accessToken"
    "Content-Type"  = "application/json"
}

# --- 4. Get Activity Code Mappings ---
Write-Log "Fetching activity codes for business unit..."
$activityCodeUrl = "https://$genesysCloudRegion/api/v2/workforce/management/businessunits/$businessUnitId/activitycodes"
$activityCodeResponse = Invoke-RestMethod -Uri $activityCodeUrl -Method Get -Headers $apiHeaders

# Create a lookup table (hashtable) for faster access
$activityCodeMap = @{}
$activityCodeResponse.activityCodes.ForEach({ $activityCodeMap[$_.id] = $_.name })
Write-Log "Found $($activityCodeMap.Count) activity codes."

# --- 5. Get Users from the Management Unit ---
Write-Log "Fetching users from management unit..."
$usersUrl = "https://$genesysCloudRegion/api/v2/workforce/management/managementunits/$managementUnitId/users"
$usersResponse = Invoke-RestMethod -Uri $usersUrl -Method Get -Headers $apiHeaders

if (-not $usersResponse.users) {
    Write-Log "No users found in the specified management unit. Exiting." "Red"
    exit
}

$userIds = $usersResponse.users.id
# Create a lookup table for user names
$userMap = @{}
$usersResponse.users.ForEach({ $userMap[$_.id] = $_.name })
Write-Log "Found $($userIds.Count) users to query."

# --- 6. Get Agent Schedules ---
Write-Log "Requesting agent schedules... (This may take a moment)"
$scheduleUrl = "https://$genesysCloudRegion/api/v2/workforce/management/businessunits/$businessUnitId/agentschedules/search"
$scheduleBody = @{
    startDate = $startDateIso
    endDate   = $endDateIso
    userIds   = $userIds
} | ConvertTo-Json

$scheduleResponse = Invoke-RestMethod -Uri $scheduleUrl -Method Post -Headers $apiHeaders -Body $scheduleBody

# --- 7. Process Schedules and Create CSV Data ---
Write-Log "Processing schedule data..."
$results = [System.Collections.Generic.List[object]]::new()

foreach ($agentSchedule in $scheduleResponse.agentSchedules) {
    $agentId = $agentSchedule.user.id
    $agentName = $userMap[$agentId] # Look up agent name

    if ($agentSchedule.shifts.Count -eq 0) {
        # Handle cases where agent has no shift (e.g., day off is not an activity code)
        $record = [PSCustomObject]@{
            AgentName        = $agentName
            Activity         = "No Shift Scheduled"
            StartTime        = $null
            EndTime          = $null
            DurationMinutes  = $null
        }
        $results.Add($record)
    }
    else {
        foreach ($shift in $agentSchedule.shifts) {
            foreach ($activity in $shift.activities) {
                # Look up the friendly name for the activity code
                $activityName = $activityCodeMap[$activity.activityCodeId]
                
                # Create a record for the CSV file
                $record = [PSCustomObject]@{
                    AgentName        = $agentName
                    Activity         = $activityName
                    StartTime        = $activity.startDate
                    EndTime          = $activity.endDate
                    DurationMinutes  = $activity.lengthMinutes
                }
                $results.Add($record)
            }
        }
    }
}

# --- 8. Export to CSV ---
if ($results.Count -gt 0) {
    # Add date to the filename
    $datedCsvPath = $csvExportPath.Replace(".csv", "_$($yesterdayStart.ToString("yyyy-MM-dd")).csv")
    $results | Export-Csv -Path $datedCsvPath -NoTypeInformation
    Write-Log "Export complete! $($results.Count) records saved to $datedCsvPath" "Green"
}
else {
    Write-Log "No schedule data was found to export." "Yellow"
}
